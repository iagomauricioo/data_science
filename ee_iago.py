# -*- coding: utf-8 -*-
"""EE-IAGO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VwEjHdmX0dbvr1x1-4ZR2khXs0EQwW0D
"""

!pip install geemap --upgrade

import ee
import geemap

# Trigger the authentication flow.
ee.Authenticate()

# Initialize the library.
ee.Initialize(project = 'ee-lablerecesmac2024')

Map = geemap.Map()
Map

# Defina uma geometria para sua área de interesse (AoI)
geometry = ee.Geometry.Polygon([
    [
        [-35.797905, -9.700689],
        [-35.715379, -9.700689],
        [-35.715379, -9.537000],
        [-35.797905, -9.537000],
        [-35.797905, -9.700689]
    ]
])

# Define o intervalo de datas
start_date = '2023-01-01'
end_date = '2023-12-31'

# Lista de meses para iterar
months = ee.List.sequence(1, 12)

# Paleta de cores e thresholds para FDI
fdi_palette = ['white', 'yellow', 'orange', 'red', 'darkred']
fdi_thresholds = [-1, -0.5, 0, 0.5, 1]

# Paleta de cores para NDVI
ndvi_palette = ['#8B4513', '#F5DEB3', '#98FB98', '#00FF00', '#006400']
ndvi_thresholds = [-1, -0.5, 0, 0.5, 1]

# Carrega a coleção de imagens Sentinel-2
sentinel2 = ee.ImageCollection('COPERNICUS/S2') \
    .filterDate(start_date, end_date) \
    .filterBounds(geometry) \
    .filterMetadata('CLOUDY_PIXEL_PERCENTAGE', 'less_than', 20)
     #É importante o uso de 'COPERNICUS/S2_HARMONIZED' pois o 'COPERNICUS/S2' está depreciado.

# Função para normalizar as bandas
def normalize(image):
    bands = ['B2', 'B3', 'B4', 'B8']  # Pode incluir outras bandas se necessário

    min_max = image.reduceRegion(
        reducer=ee.Reducer.minMax(),
        geometry=geometry,
        scale=10,
        maxPixels=1e9
    )

    normalized_bands = []
    for band in bands:
        min_value = ee.Number(min_max.get(f"{band}_min"))
        max_value = ee.Number(min_max.get(f"{band}_max"))
        normalized = image.select(band).subtract(min_value).divide(max_value.subtract(min_value)).rename(f"{band}_normalized")
        normalized_bands.append(normalized)

    return image.addBands(ee.Image(normalized_bands))

# Função para calcular NDWI e adicionar como banda
def add_ndwi(image):
    ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI')
    return image.addBands(ndwi)

# Função para calcular o Floating Debris Index (FDI)
def calculate_fdi(image):
    ndwi_mask = image.select('NDWI').gt(0)  # Máscara para áreas de água (NDWI > 0)
    fdi = image.expression(
        '((B3 - B8) / (B3 + B8)) * (NDWI - (B8 - B3) / (0.86 - 0.74) * (0.94 - 0.74))',
        {
            'B3': image.select('B3_normalized'),
            'B8': image.select('B8_normalized'),
            'NDWI': image.select('NDWI')
        }
    ).rename('FDI').updateMask(ndwi_mask)

    return image.addBands(fdi)

# Função para calcular NDVI na área de água mascarada
def add_masked_ndvi(image):
    ndwi_mask = image.select('NDWI').gt(0)  # Máscara para áreas de água (NDWI > 0)
    ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI').updateMask(ndwi_mask)
    return image.addBands(ndvi)

# Aplicar normalização à coleção Sentinel-2
normalized_collection = sentinel2.map(normalize)

# Aplicar cálculo de NDWI, FDI e NDVI mascarado à coleção normalizada
processed_collection = normalized_collection \
    .map(add_ndwi) \
    .map(calculate_fdi) \
    .map(add_masked_ndvi)

# Função para criar máscara para algas e outros detritos flutuantes
def mask_floating_debris(image):
    fdi_threshold = 0.1  # Limite para FDI
    ndvi_threshold = -0.1  # Limite inferior para NDVI para identificar detritos não vegetativos

    # Máscara para detritos não vegetativos (NDVI baixo)
    non_vegetative_debris_mask = image.select('FDI').gt(fdi_threshold).And(image.select('NDVI').lt(ndvi_threshold))

    # Máscara para algas (NDVI alto)
    algae_mask = image.select('FDI').gt(fdi_threshold).And(image.select('NDVI').gte(ndvi_threshold))

    # Adiciona as máscaras como bandas separadas
    return image.addBands(non_vegetative_debris_mask.rename('NonVegetativeDebrisMask')) \
                .addBands(algae_mask.rename('AlgaeMask'))

# Aplicar a máscara de detritos flutuantes e algas à coleção processada
debris_collection = processed_collection.map(mask_floating_debris)

# Função para criar e adicionar camadas ao mapa para um determinado mês
def add_layer_for_month(month):
    filtered = debris_collection.filter(ee.Filter.calendarRange(month, month, 'month'))
    first_image = filtered.first()

    # Adicionar camada de FDI com paleta de cores definida
    Map.addLayer(first_image.select('FDI'), {'min': -1, 'max': 1, 'palette': fdi_palette}, f'FDI {month}')

    # Adicionar camada de NDVI mascarado com paleta de cores definida
    Map.addLayer(first_image.select('NDVI'), {'min': -1, 'max': 1, 'palette': ndvi_palette}, f'NDVI {month}')

    # Adicionar camada de detritos flutuantes não vegetativos
    Map.addLayer(first_image.select('NonVegetativeDebrisMask'), {'min': 0, 'max': 1, 'palette': ['white', 'red']}, f'Detritos Não Vegetativos {month}')

    # Adicionar camada de algas
    Map.addLayer(first_image.select('AlgaeMask'), {'min': 0, 'max': 1, 'palette': ['white', 'green']}, f'Algas {month}')

months_info = months.getInfo()

# Iterar sobre cada mês e adicionar camada ao mapa
for month in months_info:
    add_layer_for_month(month)

# Exibir a área de interesse no mapa
Map.centerObject(geometry, 10)
Map.addLayer(geometry, {'color': 'red'}, 'Geometry')

# Adicionar camada da primeira imagem Sentinel-2
first_original_image = sentinel2.first()
Map.addLayer(first_original_image, {'bands': ['B4', 'B3', 'B2'], 'max': 3000}, 'Original Sentinel-2 Image')

# Adicionar camada da primeira imagem normalizada com NDWI, FDI e NDVI mascarado
first_processed_image = normalized_collection.map(add_ndwi).map(calculate_fdi).map(add_masked_ndvi).first()
ndwi_mask = first_processed_image.select('NDWI').gt(0)
masked_image = first_processed_image.updateMask(ndwi_mask)
Map.addLayer(masked_image, {'bands': ['B4_normalized', 'B3_normalized', 'B2_normalized'], 'min': 0, 'max': 1}, 'Masked Normalized Sentinel-2 Image')

# Adicionar camada de NDWI da primeira imagem
Map.addLayer(first_processed_image.select('NDWI'), {'min': -1, 'max': 1, 'palette': ['00FFFF', '0000FF']}, 'NDWI')

# Adicionar camada de NDVI mascarado da primeira imagem
Map.addLayer(first_processed_image.select('NDVI'), {'min': -1, 'max': 1, 'palette': ndvi_palette}, 'NDVI')

# Adicionar legenda para o FDI
fdi_legend = geemap.create_legend(
    title='Floating Debris Index (FDI)',
    colors=fdi_palette,
    labels=[f'{fdi_thresholds[i]:.2f} - {fdi_thresholds[i+1]:.2f}' if i+1 < len(fdi_thresholds) else f'{fdi_thresholds[i]:.2f}+' for i in range(len(fdi_thresholds))]
)
Map.add_legend(legend=fdi_legend, position='bottomright')

# Adicionar legenda para o NDVI
ndvi_legend = geemap.create_legend(
    title='NDVI',
    colors=ndvi_palette,
    labels=[f'{ndvi_thresholds[i]:.2f} - {ndvi_thresholds[i+1]:.2f}' if i+1 < len(ndvi_thresholds) else f'{ndvi_thresholds[i]:.2f}+' for i in range(len(ndvi_thresholds))]
)
Map.add_legend(legend=ndvi_legend, position='bottomleft')

#Map.addLayer(geometry, {'color': 'red'}, 'Maceió')

# --- Calcular FDI médio global e adicionar camada ao mapa ---
mean_fdi_global = debris_collection.select('FDI').mean()
Map.addLayer(mean_fdi_global, {'min': -1, 'max': 1, 'palette': fdi_palette}, 'FDI Médio Global')

# Exibir no console a média de FDI para a área de interesse
mean_fdi = debris_collection.select('FDI').mean().reduceRegion(
    reducer=ee.Reducer.mean(),
    geometry=geometry,
    scale=10,
    maxPixels=1e9
)
print('Média de FDI para a área de interesse:', mean_fdi.getInfo())

Map.to_html(filename='mapa_interativo_ok.html', title='Mapa Interativo do GEE') # Use filename instead of outfile

object_of_ee = first_processed_image.select('FDI')

def export_image(ee_object, description, filename_prefix):
    geemap.ee_export_image(
        ee_object=ee_object, # Pass the image as a positional argument
        filename=filename_prefix,
        scale=50,
        region=geometry
    )

# Exportar a primeira imagem Sentinel-2 do ano
#first_sentinel2_image = sentinel2.first()
export_image(object_of_ee, 'Sentinel2_Image_2023', 'Sentinel2_Image_2023.tif')